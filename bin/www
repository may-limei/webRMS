#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webrms:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3031');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var io = require('socket.io')(server);

var epics = require('epics');
var pv8 = new epics.Channel('EVMN-GDRM:DoseRate003');
var pv9 = new epics.Channel('EVMN-GDRM:DoseRate004');

console.log(pv8.pvName);
console.log(pv9.pvName);


var pvs={ai:[{pvname:"EVMN-GDRM:DoseRate001"},{pvname:"EVMN-GDRM:DoseRate002"},{pvname:"EVMN-GDRM:DoseRate003"},{pvname:"EVMN-GDRM:DoseRate004"},{pvname:"EVMN-GDRM:DoseRate005"}],
         ao:[{pvname:"hanlfHost:ao1"}, {pvname:"hanlfHost:ao2"}, {pvname:"hanlfHost:ao3"}]
        }

server.listen(port,'0.0.0.0',function(){
  console.log("Express server listening on port " + app.get('port'));
});

io.on('connection', function (socket) {

connect_pvs(pvs.ai,function(err,results){
      async.map(results,function(item,callback){
        item.on("value", function(data) {
        // console.log('Value:',item.pvName,data);
        socket.emit(item.pvName, data);
        // console.log(item.pvName+" value change socket evnet emit")
        });  
      })
  });

  connect_pvs_SEVR(pvs.ai,function(err,results){
      async.map(results,function(item,callback){
        item.on("value", function(data) {
        // console.log('Value:',item.pvName,data);
        socket.emit(item.pvName, data);
        // console.log(item.pvName+" severity change socket evnet emit")
        });  
      })
  });

});

// val=pv8.connect(function(err) {
// if(pv8.state()){
// // console.log(pv9.state());
// pv8.monitor();
// console.log(pv8.pvName+" is connected");
// } 
// });
// val=pv9.connect(function(err) {
// if(pv9.state()){
// // console.log(pv9.state());
// pv9.monitor();
// console.log(pv9.pvName+" is connected");
// } 
// });












/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port,'0.0.0.0');
//server.on('error', onError);
//server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

async= require('async');

function connect_pvs(pvs,callback){
    async.map(pvs, function(item, callback) {
        // console.log(item.pvname+" is connect*");
       var pv = new epics.Channel(item.pvname);
       pv.connect(function(err) {
       if(pv.state()){
          pv.monitor()};
          callback(null,pv);
          console.log(item.pvname+" is connected*");
      });
    }, function(err,results){
         callback(err,results); 
  });
};

function connect_pvs_SEVR(pvs,callback){
    async.map(pvs, function(item, callback) {
        // console.log(item.pvname+" is connect*");
       var pv = new epics.Channel(item.pvname+".SEVR");
       pv.connect(function(err) {
       if(pv.state()){
          pv.monitor()};
          callback(null,pv);
          console.log(item.pvname+"alarm severity is monitored*");
      });
    }, function(err,results){
         callback(err,results); 
  });
};